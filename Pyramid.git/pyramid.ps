%!
% Pyramidal Fractal in PostScript
%
% Draws a 3-D pyramid fractal, as seen in a popular text on Fractals
%
% Initial version from 1995:
%   Curt.McDowell@andrew.cmu.edu
%   Carnegie-Mellon University
%

72 72 scale
0.5 72 div setlinewidth

% User-Adjustable Parameters:
%
% Adjust viewing angle by modifying alpha and beta.
% The pyramid is originally seen level with the front edge.
% It is then rotated around the Z axis by alpha
% (front corner moving right), then around the Y (horizonal)
% axis by beta (top corner moving down).

/Alpha		50    def	/Beta		65    def
/ShadeLeft	0.95  def	/ShadeRight	0.5   def
/PageW		8.5   def	/PageH		11    def
/Side		0.65  def	/Order		5     def

0 -1 translate

/sina Alpha sin def	/sinb Beta sin def
/cosa Alpha cos def	/cosb Beta cos def

% Transformation from 3-D coordinates to 2-D

/xform {	% q0 ==> x' y'
    /q0 exch def

    q0 1 get cosa mul q0 0 get sina mul sub
    PageW 2 div mul		% Compute X and
    PageW 2 div add		% leave on stack

    q0 0 get sinb mul cosa mul q0 1 get sina mul sinb mul
    add q0 2 get cosb mul add
    PageW 2 div mul		% Compute Y and
    PageH 2 div add		% leave on stack
} def

/coord {	% pt ==> x y
    dup 0 get swap 1 get
}

% The pyramid is defined by four points, and is broken into
% sub-pyramids by connecting the midpoints of the six edges.

/mid {		% q1 q2 ==> (q1 + q2) / 2
    /q2 exch def /q1 exch def
    q1 0 get q2 0 get add 2 div
    q1 1 get q2 1 get add 2 div
    q1 2 get q2 2 get add 2 div
    3 array astore
} def

/pyramid {	% order p1 p2 p3 p4 ==> --
    12 dict begin

    /p4 exch def /p3 exch def /p2 exch def /p1 exch def /order exch def

    % Generate the sub-pyramids if order > 1, else draw order 1 pyramid
    order 1 gt
    {
	/p12 p1 p2 mid def
	/p13 p1 p3 mid def
	/p14 p1 p4 mid def
	/p23 p2 p3 mid def
	/p24 p2 p4 mid def
	/p34 p3 p4 mid def

	/order' order 1 sub def

	order' p1  p12 p13 p14 pyramid
	order' p12 p2  p23 p24 pyramid
	order' p14 p24 p34 p4  pyramid
	order' p13 p23 p3  p34 pyramid
    }
    {
	p2 xform /ay exch def /ax exch def   % p2 (ax, ay) = left bottom
	p1 xform /by exch def /bx exch def   % p1 (bx, by) = bottom front
	p4 xform /cy exch def /cx exch def   % p4 (cx, cy) = right bottom
	p3 xform /dy exch def /dx exch def   % p3 (dx, dy) = top

	% Fill the two visible faces with different shades

	ShadeLeft setgray
	ax ay moveto   bx by lineto   dx dy lineto   closepath fill

	ShadeRight setgray
	cx cy moveto   bx by lineto   dx dy lineto   closepath fill

	% Draw the five visible line segments

	0 setgray
	ax ay moveto   bx by lineto   cx cy lineto   dx dy lineto   closepath
	dx dy moveto   bx by lineto   stroke
    }
    ifelse

    end
} def

/rp Side def
/rn rp neg def

Order [rp rp rp] [rp rn rn] [rn rn rp] [rn rp rn]
pyramid

showpage
