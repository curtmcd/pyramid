%!PS-Adobe-2.0

% Pyramidal Fractal in PostScript
%
% Draws a 3-D pyramid fractal, as seen in a popular text on Fractals
%
% Initial version from 1995
%   Curt.McDowell@andrew.cmu.edu
%   Carnegie-Mellon University
%
% Updated 2020
%   Curt McDowell <coder@fishlet.com>
%
% Coordinate systems
%
%    3D: x goes toward viewer, y goes right, z goes up
%    2D: x goes right, y goes up
%
% User-Adjustable Parameters:
%
% Adjust rotation of pyramid by modifying Roll, Pitch and Yaw angles.
%
% The outermost pyramid is defined by four points, and is broken into
% sub-pyramids by connecting midpoints of the six edges.

/Roll 45 def   /Pitch -25 def   /Yaw -10 def
/PageW 8.5 def   /PageH 11 def
/Side 0.65 def
/Order 4 def

/LightPos [4.0 -4.0 4.0] def
/LightBrightness 40 def

/EyePos  [4.0 0.0 0.0] def

% Print stack contents bottom to top (for debugging)
/p {
    count 1 sub -1 0 { index == } for
} def

/vbinop {				% v1 v2 {op} ==> vr
    /_op exch def
    /_v2 exch def
    /_v1 exch def
    [
	_v1 0 get _v2 0 get _op exec
	_v1 1 get _v2 1 get _op exec
	_v1 2 get _v2 2 get _op exec
    ]
} def

/vadd { {add} vbinop } def
/vsub { {sub} vbinop } def

% Vector divide
/vdiv {				% v r ==> (v/r)
    /_r exch def
    /_v exch def
    [
	_v 0 get _r div
	_v 1 get _r div
	_v 2 get _r div
    ]
} def

% 3D dot product
/vdot {				% v1 v2 ==> vd
    /_v2 exch def
    /_v1 exch def
    _v1 0 get _v2 0 get mul	% (x1*x2)
    _v1 1 get _v2 1 get mul	% (x1*x2) (y1*y2)
    _v1 2 get _v2 2 get mul	% (x1*x2) (y1*y2) (z1*z2)
    add add			% vd
} def

% 3D cross product
/vcross {			% v1 v2 ==> vc
    /_v2 exch def
    /_v1 exch def
    [
	_v1 1 get _v2 2 get mul _v1 2 get _v2 1 get mul sub	% (y1*z2 - z1*y2)
	_v1 2 get _v2 0 get mul _v1 0 get _v2 2 get mul sub	% (z1*x2 - x1*z2)
	_v1 0 get _v2 1 get mul _v1 1 get _v2 0 get mul sub	% (x1*y2 - y1*x2)
    ]
} def

% Vector magnitude
/vmag {				% v ==> r
    aload pop dup mul exch dup mul add exch dup mul add sqrt
} def

% Rotate a 3D vector around 3 axes with Roll (x), Pitch (y), then Yaw (z).
%
% From Wikipedia "Rotation matrix":
%
%   R = Rz(Yaw) Ry(Pitch) Rx(Roll)
%
%       [ c(Y)  -s(Y)  0 ] [  c(P)  0  s(P) ] [ 1  0      0    ]
%     = | s(Y)   c(Y)  0 | |  0     1  0    | | 1  c(R)  -s(R) |
%       [ 0      0     1 ] [ -s(P)  0  c(P) ] [ 0  s(R)   c(R) ]
%
%       [ x c(Y) c(P) + y (c(Y) s(P) s(R) - s(Y) c(R)) + z (c(Y) s(P) c(R) + s(Y) s(R)) ]
%  vR = | x s(Y) c(P) + y (s(Y) s(P) s(R) + c(Y) c(R)) + z (s(Y) s(P) c(R) - c(Y) s(R)) |
%       [ x (-s(P))   + y c(P) s(R)                    + z c(P) c(R)                    ]

/vrotate {	% v ==> v
    9 dict begin   aload pop   /z exch def   /y exch def   /x exch def

    /cosR Roll  cos def   /sinR Roll  sin def
    /cosP Pitch cos def   /sinP Pitch sin def
    /cosY Yaw   cos def   /sinY Yaw   sin def

    [
	x cosY mul cosP mul
	y cosY sinP mul sinR mul sinY cosR mul sub mul add
	z cosY sinP mul cosR mul sinY sinR mul add mul add

	x sinY mul cosP mul
	y sinY sinP mul sinR mul cosY cosR mul add mul add
	z sinY sinP mul cosR mul cosY sinR mul sub mul add

	x sinP neg mul
	y cosP mul sinR mul add
	z cosP mul cosR mul add
    ]
    end
} def

% Map a 3D point q to a 2D point p
/xview {	% q ==> p
    aload pop /_z exch def /_y exch def /_x exch def
    [
	% screen x
	_y
	PageW 2 div mul
	PageW 2 div add

	% screen y (assumes PageW is less than or equal to pageH)
	_z
	PageW 2 div mul
	PageH 2 div add
    ]
} def

% Take the midpoint of a line between two points in space
/qmid {		% q1 q2 ==> (q1 + q2)/2
    vadd 2 vdiv
} def

% Average the points of a face to find the center of it, where
% face is an array of 3D points given in counter-clockwise order.
/fcenter {				% [q1 q2 q3 ...] ==> qavg
    dup length exch			% 4 [q1 q2 q3 q4]
    [0 0 0] exch			% 4 [0 0 0] [q1 q2 q3 q4]
    { vadd } forall			% 4 qsum
    exch vdiv				% qavg
} def

% Determine a vector perpendicular to a face, where
% face is an array of 3D points given in counter-clockwise order.
/fperp {				% [q1 q2 q3 ...] ==> vp
    dup 0 2 getinterval aload pop   	% [q1 q2 q3 ...] q1 q2
    vsub exch				% (q1-q2) [q1 q2 q3 ...]
    1 2 getinterval aload pop   	% (q1-q2) q2 q3
    vsub				% (q1-q2) (q2-q3)
    vcross				% vp
    dup vmag				% vp r
    vdiv
} def

/pmoveto {			% p ==> --
    aload pop moveto
} def

/plineto {			% p ==> --
    aload pop lineto
} def

%%%%% Buffer datatype %%%%%

% A buffer is a expandable array
%
% The buffer is stored as an array of two elements, the first being the
% number of items in the buffer and the second being an array containing
% the items, where the array may be large than the number of items.
% This allows adding one item at a time with a reasonably small amount of copying.
%
% Example if a buffer has sufficient capacity for a new item
%   [3 [a b c x]] e ==> [3 [a b c e]]
%
% When a buffer is full, it gets copied and its capacity is doubled
%   [4 [a b c d]] e ==> [5 [a b c d e x x x]]

% Create an empty buffer
/buf_new {					% buf_new ==> buffer
    [ 0 [ null ] ]
} def

% Add an item to the end of a buffer, expanding it if necessary.
/buf_add {					% buffer item buf_add ==>
    /_item exch def
    /_buffer exch def
    /_occupancy _buffer 0 get def
    /_storage _buffer 1 get def
    _storage length _occupancy eq
    {	% If full, double the allocation
	_storage length 2 mul array		% [x x x x x x x x]
	dup 0 _storage putinterval		% [a b c d x x x x]
	/_storage exch def
	_buffer 1 _storage put
    } if

    _storage _occupancy _item put
    _buffer 0 _occupancy 1 add put
} def

% Convert a buffer to array (no copying required)
/buf_toarray {					% buffer => array
    aload pop					% 3 [a b c x]
    exch 0 exch					% [a b c x] 0 3
    getinterval					% [a b c]
} def

%%%%

% Generate the faces of a pyramid
% Each face is an array of three 3D points [q1 q2 q3]

/pyramid {	% q1 q2 q3 q4 order ==> --
    12 dict begin

    /order exch def

    /q4 exch def
    /q3 exch def
    /q2 exch def
    /q1 exch def

    order 1 gt {
	% For order > 1, generate pyramid of order - 1

	/q12 q1 q2 qmid def
	/q13 q1 q3 qmid def
	/q14 q1 q4 qmid def
	/q23 q2 q3 qmid def
	/q24 q2 q4 qmid def
	/q34 q3 q4 qmid def

	/order order 1 sub def

	q1  q12 q13 q14 order pyramid
	q12 q2  q23 q24 order pyramid
	q14 q24 q34 q4  order pyramid
	q13 q23 q3  q34 order pyramid
    } {
	% For order = 1, generate faces
	% As counter-clockwise polygons

	faces [q2 q1 q3] buf_add		% front left
	faces [q1 q4 q3] buf_add		% front right
	faces [q3 q4 q2] buf_add		% back
	faces [q1 q2 q4] buf_add		% bottom
    } ifelse
    end
} def

% Bubble sort modified from Don Lancaster's
/bubblesort {		% array comparison => array
    3 dict begin
    /comparison exch def
    /arr exch def
    arr length 1 sub -1 1 {
	arr 0 get exch 1 exch 1 exch {
	    /posn exch def
	    arr posn get
	    2 copy comparison { exch } if
	    arr exch posn 1 sub exch put
	} for
	arr exch posn exch put
    } for
    arr
    end
} def

/rp Side def
/rn rp neg def

/render {
    /q1 [rp rp rp] vrotate def
    /q2 [rp rn rn] vrotate def
    /q3 [rn rn rp] vrotate def
    /q4 [rn rp rn] vrotate def

    /faces buf_new def
    q1 q2 q3 q4 Order pyramid
    /faces faces buf_toarray def

    % Sort faces by order of increasing x (back to front)
    faces { fcenter 0 get exch fcenter 0 get exch lt } bubblesort
    {
	/face exch def

	/q1 face 0 get def
	/q2 face 1 get def
	/q3 face 2 get def

	/p1 q1 xview def
	/p2 q2 xview def
	/p3 q3 xview def

	% Determine the shade
	LightPos face fcenter vsub dup vmag vdiv	% unit vec face center to light
	face fperp					% unit vec face perpendicular
	vdot						% cosine of angle between them
	1 add 2 div					% range (-1, 1) ==> (0, 1)
	1
	LightPos face fcenter vsub vmag			% distance face center to light
	0.1 add						% just to make sure it's not zero
	dup mul div mul LightBrightness mul		% cosine * brightness / distance^2
	dup 1 gt {pop 1} if				% clamp between 0 and 1
	setgray
	
	% Fill the face
	p1 pmoveto   p2 plineto   p3 plineto   closepath fill

	% Outline the face in black
	0 setgray
	p1 pmoveto   p2 plineto   p3 plineto   closepath stroke

	% Draw the axes (for debugging)
%	/p0 [0 0 0] xview def
%	/px [0.1 0 0] xview def
%	/py [0 0.2 0] xview def
%	/pz [0 0 0.3] xview def
%	p0 pmoveto   px plineto   stroke
%	p0 pmoveto   py plineto   stroke
%	p0 pmoveto   pz plineto   stroke
    } forall
} def

%0 10 3600 {
%    /Yaw exch def
%    /Pitch exch def
%    /Roll exch def

    72 72 scale
    0.5 72 div setlinewidth

    render
    showpage
%} for
