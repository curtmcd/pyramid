%!PS-Adobe-2.0

% Sierpinski Pyramid Fractal in PostScript
%
% Initial version from 1995
%   Curt McDowell <cm26@andrew.cmu.edu>
%   Carnegie-Mellon University
%
% Redone 2020
%   Curt McDowell <coder@fishlet.com>
%
% Coordinate systems
%    3D: x goes toward viewer, y goes right, z goes up
%    2D: x goes right, y goes up
%
% Adjust rotation by modifying Roll, Pitch and Yaw angles.
%
% The outermost pyramid is defined by four points, and is broken into
% sub-pyramids by connecting midpoints of the six edges.
%
% This operates naively by first generating all of the faces, then
% sorting them from back to front, then drawing them shaded. There is
% no backface culling or other efficiency. Shadows are not rendered.
%
% The xview function has primitive support for single-point perspective.
% The smaller EyeDistance is, the more perspective distortion is seen.

/. {def} def /^ {exch} def /? {get} def /! {put} def
/+ {add} def /- {sub} def /* {mul} def

/Roll 45 .     /Pitch -30 .   /Yaw -15 .
/PageW 8.5 .   /PageH 11 .
/Side 0.60 .
/Order 5 .

/LightPos [4.0 4.0 4.0] .
/LightBrightness 35 .
/EyeDistance 3 .
/EdgeBrightness 0.55 .

% Print stack contents bottom to top (for command line debugging)
/p { count 1 - -1 0 { index == } for } .	% p --

% Helper to start dict for parms taken off stack, with extra room for locals
/args {						% [... /parm2 /parm1] args --
    12 dict begin {^ .} forall
} .

% Swap two elements of an array.
/arr_exch {					% arr i j arr_exch --
    2 index 1 index ? ^				% arr i arr[j] j
    3 index ^ 1 index 4 index ?			% arr i arr[j] arr j arr[i]
    ! !
} .

% Vector element-wise binary operation
/vbinop {					% v1 v2 {op} vbinop -- vr
    [/op /v2 /v1] args
    [ v1 0 ? v2 0 ? op   v1 1 ? v2 1 ? op   v1 2 ? v2 2 ? op ]
    end
} .

/vadd { {+} vbinop } .
/vsub { {-} vbinop } .

% Vector divide
/vdiv {						% v r vdiv -- (v/r)
    [/r /v] args
    [ v 0 ? r div   v 1 ? r div   v 2 ? r div ]
    end
} .

% Vector 3D dot product
/vdot {						% v1 v2 vdot -- vd
    [/v2 /v1] args
    v1 0 ? v2 0 ? *				% (x1*x2)
    v1 1 ? v2 1 ? * +				% ((x1*x2)+(y1*y2))
    v1 2 ? v2 2 ? * +				% vd
    end
} .

% Vector 3D cross product
/vcross {					% v1 v2 vcross -- vc
    [/v2 /v1] args
    [
	v1 1 ? v2 2 ? * v1 2 ? v2 1 ? * -	% (y1*z2 - z1*y2)
	v1 2 ? v2 0 ? * v1 0 ? v2 2 ? * -	% (z1*x2 - x1*z2)
	v1 0 ? v2 1 ? * v1 1 ? v2 0 ? * -	% (x1*y2 - y1*x2)
    ]
    end
} .

% Vector magnitude
/vmag {						% v vmag -- r
    aload pop dup * ^ dup * + ^ dup * + sqrt
} .

% Vector 3D rotation around x axis by Roll, then y axis by Pitch, then z axis by Yaw.
%
% From Wikipedia "Rotation matrix":
%
%   R = Rz(Yaw) Ry(Pitch) Rx(Roll)
%
%	[ c(Y)	-s(Y)  0 ] [  c(P)  0  s(P) ] [ 1  0	  0    ]
%     = | s(Y)	 c(Y)  0 | |  0	    1  0    | | 1  c(R)	 -s(R) |
%	[ 0	 0     1 ] [ -s(P)  0  c(P) ] [ 0  s(R)	  c(R) ]
%
%	[ x c(Y) c(P) + y (c(Y) s(P) s(R) - s(Y) c(R)) + z (c(Y) s(P) c(R) + s(Y) s(R)) ]
%  vR = | x s(Y) c(P) + y (s(Y) s(P) s(R) + c(Y) c(R)) + z (s(Y) s(P) c(R) - c(Y) s(R)) |
%	[ x (-s(P))   + y c(P) s(R)		       + z c(P) c(R)			]

/vrotate {					% v vrotate ==> v
    aload pop [/z /y /x] args
    /cR Roll  cos .	/sR Roll  sin .
    /cP Pitch cos .	/sP Pitch sin .
    /cY Yaw   cos .	/sY Yaw   sin .
    [
	x cY * cP * y cY sP * sR * sY cR * - * + z cY sP * cR * sY sR * + * +
	x sY * cP * y sY sP * sR * cY cR * + * + z sY sP * cR * cY sR * - * +
	x sP neg * y cP * sR * + z cP * cR * +
    ]
    end
} .

% Map a 3D point q to a 2D point p
/xview {					% q xview -- p
    aload pop [/z /y /x] args
    /figureW PageW PageH min .
    [
	% screen x
	y   EyeDistance x -   div   EyeDistance *
	figureW 2 div * PageW 2 div +

	% screen y
	z   EyeDistance x -   div   EyeDistance *
	figureW 2 div * PageH 2 div +
    ]
    end
} .

% Take the midpoint of a line between two points in space
/qmid {	vadd 2 vdiv } .				% q1 q2 qmid -- (q1 + q2)/2

% Average the points of a face to find the center of it,
% where face is an array of 3D points given in counter-clockwise order.
/fcenter {					% [q1 q2 q3 ...] fcenter -- qavg
    dup length ^				% n [q1 q2 ...]
    [0 0 0] ^					% n [0 0 0] [q1 q2 ...]
    { vadd } forall				% n qsum
    ^ vdiv					% qavg
} .

% Determine the unit normal vector to a face,
% where face is an array of 3D points given in counter-clockwise order.
/fnorm {					% [q1 q2 q3 ...] fnorm -- vp
    dup 0 2 getinterval aload pop		% [q1 q2 q3 ...] q1 q2
    vsub ^					% (q1-q2) [q1 q2 q3 ...]
    1 2 getinterval aload pop			% (q1-q2) q2 q3
    vsub					% (q1-q2) (q2-q3)
    vcross					% vp
    dup vmag					% vp r
    vdiv
} .

% Point draw functions, where p = [x y]
/pmoveto { aload pop moveto } .			% p pmoveto --
/plineto { aload pop lineto } .			% p plineto --

% Buffer datatype:
%   A buffer is an expandable array. It's stored as an array of two elements,
%   the first being the occupancy and the second being the storage array of items.
%   The storage array is grown in powers of 2 whenever its size is exceeded.
%   This allows adding one item at a time with a reasonably small amount of copying.
%   Example if a buffer has sufficient capacity for a new item
%     [3 [a b c x]] e ==> [3 [a b c e]]
%   When a buffer is full, it gets copied and its capacity is doubled
%     [4 [a b c d]] e ==> [5 [a b c d e x x x]]
%   The buffer may be converted to a regular array with little expense.

/buf_new { [ 0 [ null ] ] } .			% buf_new -- buffer

/buf_add {					% buffer item buf_add --
    [/item /buffer] args
    /occupancy buffer 0 ? .
    /storage buffer 1 ? .
    storage length occupancy eq
    {	% Full; double the storage and copy the old storage into it
	storage length 2 * array		% [x x x x x x x x]
	dup 0 storage putinterval		% [a b c d x x x x]
	/storage ^ .
	buffer 1 storage !
    } if
    storage occupancy item !
    buffer 0 occupancy 1 + !
    end
} .

/buf_toarray {					% buffer buf_toarray -- array
    aload pop					% 3 [a b c x]
    ^ 0 ^					% [a b c x] 0 3
    getinterval					% [a b c]
} .

% Generate the faces of a pyramid and store them in the 'faces' buffer.
% Each face is an array of three 3D points [q1 q2 q3] in counter-clockwise order.

/pyramid {					% q1 q2 q3 q4 order pyramid --
    [/order /q4 /q3 /q2 /q1] args
    order 1 gt {	% For (order > 1), generate pyramid (order - 1)
	/q12 q1 q2 qmid .   /q13 q1 q3 qmid .   /q14 q1 q4 qmid .
	/q23 q2 q3 qmid .   /q24 q2 q4 qmid .   /q34 q3 q4 qmid .
	/order order 1 - .
	q1  q12 q13 q14 order pyramid
	q12 q2	q23 q24 order pyramid
	q14 q24 q34 q4	order pyramid
	q13 q23 q3  q34 order pyramid
    } {			% For (order 1), the smallest pyramid, generate four faces
	faces [q2 q1 q3] buf_add		% front left
	faces [q1 q4 q3] buf_add		% front right
	faces [q3 q4 q2] buf_add		% back
	faces [q1 q2 q4] buf_add		% bottom
    } ifelse
    end
} .

% Heap sort:
%   Compare function (a b cmpfn --) should return -1 if a < b, 1 if a > b, else 0.

/heapsort {					% array cmpfn heapsort --
    [/cmpfn /arr] args
    /len arr length .
    % Step 1: heapify by bubbling up elements from end of array toward root
    1 1 len 1 - {
	/c ^ .
	{
	    /parent c 1 - 2 idiv .
	    arr c get	arr parent get	 cmpfn
	    0 le {exit} if
	    arr c parent arr_exch
	    /c parent .
	    c 0 le {exit} if
	} loop
    } for
    % Step 2: sort by repeatedly swapping the greatest element (found at
    % the root) with the last element, excluding the last element from the
    % heap, and bubbling down the new root.
    {
	/len len 1 - .
	len 0 le {exit} if
	/c 0 .
	arr c len arr_exch
	{
	    c 2 * 1 + dup /l ^ . 1 + /r ^ .	% Calc l/r child index
	    l len ge {exit} if	    		% Done if l out of bounds.
	    % Pick side to bubble down (l/r), whichever is bigger,
	    % but may only pick r if within bounds.
	    r len ge {
		l
	    } {
		arr l get   arr r get   cmpfn   0 lt
		{ r } { l } ifelse
	    } ifelse
	    /side ^ .
	    % Stop bubbling if greater than l/r options.
	    arr c get	arr side get   cmpfn   0 gt {exit} if
	    arr c side arr_exch
	    /c side .
	} loop
    } loop
    end
} .

/rp Side .
/rn rp neg .

/render {					% render --
    /q1 [rp rp rp] vrotate .
    /q2 [rp rn rn] vrotate .
    /q3 [rn rn rp] vrotate .
    /q4 [rn rp rn] vrotate .

    /faces buf_new .
    q1 q2 q3 q4 Order pyramid
    /faces faces buf_toarray .

    % Sort faces by order of increasing x (back to front)
    faces { fcenter 0 ? ^
	    fcenter 0 ? ^ - } heapsort

    faces {
	/face ^ .

	/q1 face 0 ? .
	/q2 face 1 ? .
	/q3 face 2 ? .

	/p1 q1 xview .
	/p2 q2 xview .
	/p3 q3 xview .

	% Determine the shade
	% XXX Should probably forget the distance thing. There's no shadows
	% XXX so it doesn't make much sense to try to light it.
	LightPos face fcenter vsub dup vmag vdiv	% unit vec face center to light
	face fnorm					% unit vec face perpendicular
	vdot						% cosine of angle between them
	1 + 2 div					% range (-1, 1) ==> (0, 1)
	1
	LightPos face fcenter vsub vmag			% distance face center to light
	0.1 +						% just to make sure it's not zero
	dup * div * LightBrightness *			% cosine * brightness / distance^2
	dup 1 gt {pop 1} if				% clamp between 0 and 1
	setgray

	% Fill the face
	p1 pmoveto   p2 plineto	  p3 plineto   closepath fill

	% Outline the face in a darker color
	EdgeBrightness setgray
	p1 pmoveto   p2 plineto	  p3 plineto   closepath stroke
    } forall
} .

72 72 scale
0.5 72 div setlinewidth
render
showpage
