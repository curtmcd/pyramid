%!PS-Adobe-2.0

% Sierpinski Pyramid Fractal in PostScript
%
% Initial version from 1995
%   Curt.McDowell@andrew.cmu.edu
%   Carnegie-Mellon University
%
% Updated 2020
%   Curt McDowell <coder@fishlet.com>
%
% Coordinate systems
%    3D: x goes toward viewer, y goes right, z goes up
%    2D: x goes right, y goes up
%
% Adjust rotation by modifying Roll, Pitch and Yaw angles.
%
% The outermost pyramid is defined by four points, and is broken into
% sub-pyramids by connecting midpoints of the six edges.
%
% This operates naively by first generating all of the faces, then
% sorting them from back to front, then drawing them. There is no
% backface culling or other efficiency. Shadows are not rendered.
%
% The xview function has primitive support for perspective. The smaller
% EyeDistance is, the more perspective distortion is seen.

/. {def} def
/' {exch def} def

/Roll 45 .     /Pitch -30 .   /Yaw -15 .
/PageW 8.5 .   /PageH 11 .
/Side 0.60 .
/Order 5 .

/LightPos [4.0 4.0 4.0] .
/LightBrightness 35 .
/EyeDistance 3 .
/EdgeBrightness 0.55 .

% Print stack contents bottom to top (for debugging)
/p {
    count 1 sub -1 0 { index == } for
} .

% Vector element-wise binary operation
/vbinop {				% v1 v2 {op} ==> vr
    /_op ' /_v2 ' /_v1 '
    [
	_v1 0 get _v2 0 get _op exec
	_v1 1 get _v2 1 get _op exec
	_v1 2 get _v2 2 get _op exec
    ]
} .

/vadd { {add} vbinop } .
/vsub { {sub} vbinop } .

% Vector divide
/vdiv {				% v r ==> (v/r)
    /_r ' /_v '
    [
	_v 0 get _r div
	_v 1 get _r div
	_v 2 get _r div
    ]
} .

% Vector 3D dot product
/vdot {				% v1 v2 ==> vd
    /_v2 ' /_v1 '
    _v1 0 get _v2 0 get mul	% (x1*x2)
    _v1 1 get _v2 1 get mul	% (x1*x2) (y1*y2)
    _v1 2 get _v2 2 get mul	% (x1*x2) (y1*y2) (z1*z2)
    add add			% vd
} .

% Vector 3D cross product
/vcross {			% v1 v2 ==> vc
    /_v2 ' /_v1 '
    [
	_v1 1 get _v2 2 get mul _v1 2 get _v2 1 get mul sub	% (y1*z2 - z1*y2)
	_v1 2 get _v2 0 get mul _v1 0 get _v2 2 get mul sub	% (z1*x2 - x1*z2)
	_v1 0 get _v2 1 get mul _v1 1 get _v2 0 get mul sub	% (x1*y2 - y1*x2)
    ]
} .

% Vector magnitude
/vmag {				% v ==> r
    aload pop dup mul exch dup mul add exch dup mul add sqrt
} .

% Vector 3D rotation around 3 axes with Roll (x), Pitch (y), then Yaw (z).
%
% From Wikipedia "Rotation matrix":
%
%   R = Rz(Yaw) Ry(Pitch) Rx(Roll)
%
%       [ c(Y)  -s(Y)  0 ] [  c(P)  0  s(P) ] [ 1  0      0    ]
%     = | s(Y)   c(Y)  0 | |  0     1  0    | | 1  c(R)  -s(R) |
%       [ 0      0     1 ] [ -s(P)  0  c(P) ] [ 0  s(R)   c(R) ]
%
%       [ x c(Y) c(P) + y (c(Y) s(P) s(R) - s(Y) c(R)) + z (c(Y) s(P) c(R) + s(Y) s(R)) ]
%  vR = | x s(Y) c(P) + y (s(Y) s(P) s(R) + c(Y) c(R)) + z (s(Y) s(P) c(R) - c(Y) s(R)) |
%       [ x (-s(P))   + y c(P) s(R)                    + z c(P) c(R)                    ]

/vrotate {	% v ==> v
    9 dict begin   aload pop   /z '   /y '   /x '

    /cosR Roll  cos .   /sinR Roll  sin .
    /cosP Pitch cos .   /sinP Pitch sin .
    /cosY Yaw   cos .   /sinY Yaw   sin .

    [
	x cosY mul cosP mul
	y cosY sinP mul sinR mul sinY cosR mul sub mul add
	z cosY sinP mul cosR mul sinY sinR mul add mul add

	x sinY mul cosP mul
	y sinY sinP mul sinR mul cosY cosR mul add mul add
	z sinY sinP mul cosR mul cosY sinR mul sub mul add

	x sinP neg mul
	y cosP mul sinR mul add
	z cosP mul cosR mul add
    ]
    end
} .

% Map a 3D point q to a 2D point p
/xview {				% q ==> p
    aload pop /_z ' /_y ' /_x '
    [
	% screen x
	_y   EyeDistance _x sub   div   EyeDistance mul
	PageW 2 div mul
	PageW 2 div add

	% screen y (assumes PageW is less than or equal to pageH)
	_z   EyeDistance _x sub   div   EyeDistance mul
	PageW 2 div mul
	PageH 2 div add
    ]
} .

% Take the midpoint of a line between two points in space
/qmid {					% q1 q2 ==> (q1 + q2)/2
    vadd 2 vdiv
} .

% Average the points of a face to find the center of it, where
% face is an array of 3D points given in counter-clockwise order.
/fcenter {				% [q1 q2 q3 ...] ==> qavg
    dup length exch			% 4 [q1 q2 q3 q4]
    [0 0 0] exch			% 4 [0 0 0] [q1 q2 q3 q4]
    { vadd } forall			% 4 qsum
    exch vdiv				% qavg
} .

% Determine a vector perpendicular to a face, where
% face is an array of 3D points given in counter-clockwise order.
/fperp {				% [q1 q2 q3 ...] ==> vp
    dup 0 2 getinterval aload pop   	% [q1 q2 q3 ...] q1 q2
    vsub exch				% (q1-q2) [q1 q2 q3 ...]
    1 2 getinterval aload pop   	% (q1-q2) q2 q3
    vsub				% (q1-q2) (q2-q3)
    vcross				% vp
    dup vmag				% vp r
    vdiv
} .

% Point draw functions, where p = [x y]
/pmoveto {				% p ==> --
    aload pop moveto
} .

/plineto {				% p ==> --
    aload pop lineto
} .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Buffer datatype (expandable array)
%
% The buffer is stored as an array of two elements, the first being the
% number of items in the buffer and the second being an array containing
% the items, where the array may be large than the number of items.
% This allows adding one item at a time with a reasonably small amount of copying.
%
% Example if a buffer has sufficient capacity for a new item
%   [3 [a b c x]] e ==> [3 [a b c e]]
%
% When a buffer is full, it gets copied and its capacity is doubled
%   [4 [a b c d]] e ==> [5 [a b c d e x x x]]

% Create an empty buffer
/buf_new {					% buf_new ==> buffer
    [ 0 [ null ] ]
} .

% Add an item to the end of a buffer, expanding it if necessary.
/buf_add {					% buffer item buf_add ==>
    /_item '
    /_buffer '
    /_occupancy _buffer 0 get .
    /_storage _buffer 1 get .
    _storage length _occupancy eq
    {	% If full, double the allocation
	_storage length 2 mul array		% [x x x x x x x x]
	dup 0 _storage putinterval		% [a b c d x x x x]
	/_storage '
	_buffer 1 _storage put
    } if

    _storage _occupancy _item put
    _buffer 0 _occupancy 1 add put
} .

% Convert a buffer to array (no copying required)
/buf_toarray {					% buffer => array
    aload pop					% 3 [a b c x]
    exch 0 exch					% [a b c x] 0 3
    getinterval					% [a b c]
} .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate the faces of a pyramid
% Each face is an array of three 3D points [q1 q2 q3]

/pyramid {	% q1 q2 q3 q4 order ==> --
    12 dict begin

    /order ' /q4 ' /q3 ' /q2 ' /q1 '

    order 1 gt {
	% For order > 1, generate pyramid of order - 1

	/q12 q1 q2 qmid .
	/q13 q1 q3 qmid .
	/q14 q1 q4 qmid .
	/q23 q2 q3 qmid .
	/q24 q2 q4 qmid .
	/q34 q3 q4 qmid .

	/order order 1 sub .

	q1  q12 q13 q14 order pyramid
	q12 q2  q23 q24 order pyramid
	q14 q24 q34 q4  order pyramid
	q13 q23 q3  q34 order pyramid
    } {
	% For order = 1, generate faces
	% As counter-clockwise polygons

	faces [q2 q1 q3] buf_add		% front left
	faces [q1 q4 q3] buf_add		% front right
	faces [q3 q4 q2] buf_add		% back
	faces [q1 q2 q4] buf_add		% bottom
    } ifelse

    end
} .

% Heap sort
%
% The user compare function should take two elements "a b" from the stack
% and return -1 if a < b, 1 if a > b, else 0.

/heapswap {					% arr i j =>
    3 dict begin
    /j ' /i ' /arr '
    arr i get
    arr j get
    arr exch i exch put
    arr exch j exch put
    end
} .

/heapcompare {					% arr i j comp => (-1 | 0 | 1)
    4 dict begin
    % Note: if I use cmp instead of comp, the result is an infinite loop
    /comp ' /j ' /i ' /arr '
    arr i get
    arr j get
    comp
    end
} .

/heapsort {					% [] {cmp} => []
    % Heapify by bubbling up elements from end of array toward root
    10 dict begin
    /cmp ' /arr '

    /len arr length .

    1 1 len 1 sub {
	/i '
	/c i .
	{
	    /parent c 1 sub 2 idiv .
	    arr c parent {cmp} heapcompare
	    0 le {exit} if
	    arr c parent heapswap
	    /c parent .
	    c 0 le {exit} if
	} loop
    } for

    % Sort by repeatedly swapping the greatest element (found at the
    % root) with the last element, excluding the last element from the
    % heap, and bubbling down the new root.

    {
	/len len 1 sub .
	len 0 le {exit} if

	/c 0 .

	arr c len heapswap

	{
	    /l c 2 mul 1 add .
	    /r c 2 mul 2 add .

	    l len ge {exit} if

	    r len ge   arr l r {cmp} heapcompare 0 gt   or
	    { /side l . } { /side r . } ifelse

	    arr c side {cmp} heapcompare 0 gt {exit} if

	    arr c side heapswap
	    /c side .
	} loop
    } loop

    end
} .

/rp Side .
/rn rp neg .

/render {
    /q1 [rp rp rp] vrotate .
    /q2 [rp rn rn] vrotate .
    /q3 [rn rn rp] vrotate .
    /q4 [rn rp rn] vrotate .

    /faces buf_new .
    q1 q2 q3 q4 Order pyramid
    /faces faces buf_toarray .

    % Sort faces by order of increasing x (back to front)
    faces { fcenter 0 get exch
	    fcenter 0 get exch sub } heapsort

    faces {
	/face '

	/q1 face 0 get .
	/q2 face 1 get .
	/q3 face 2 get .

	/p1 q1 xview .
	/p2 q2 xview .
	/p3 q3 xview .

	% Determine the shade
	% XXX Should probably forget the distance thing. There's no shadows
	% XXX so it doesn't make much sense to try to light it.
	LightPos face fcenter vsub dup vmag vdiv	% unit vec face center to light
	face fperp					% unit vec face perpendicular
	vdot						% cosine of angle between them
	1 add 2 div					% range (-1, 1) ==> (0, 1)
	1
	LightPos face fcenter vsub vmag			% distance face center to light
	0.1 add						% just to make sure it's not zero
	dup mul div mul LightBrightness mul		% cosine * brightness / distance^2
	dup 1 gt {pop 1} if				% clamp between 0 and 1
	setgray

	% Fill the face
	p1 pmoveto   p2 plineto   p3 plineto   closepath fill

	% Outline the face in a darker color
	EdgeBrightness setgray
	p1 pmoveto   p2 plineto   p3 plineto   closepath stroke

	{
	    % Draw the axes (for debugging)
	    0 setgray
	    /p0 [0 0 0] xview .
	    /px [0.1 0 0] xview .
	    /py [0 0.2 0] xview .
	    /pz [0 0 0.3] xview .
	    p0 pmoveto   px plineto   stroke
	    p0 pmoveto   py plineto   stroke
	    p0 pmoveto   pz plineto   stroke
	} pop % exec
    } forall
} .

72 72 scale
0.5 72 div setlinewidth
render
showpage
